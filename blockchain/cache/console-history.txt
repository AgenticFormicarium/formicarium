const order = await formicarium.orders("0x2589E61AC637c2467c905E0E35454cf346d0e67D");console.log(order);
const formicarium = await hre.ethers.getContractAt("Formicarium", "0xE2BBceBC540bEF2e1d76dD3154Bd94Bf1846b705");
const formicarium = await hre.ethers.getContractAt("Formicarium", "0xYourFormicariumAddress");
try {  const firstPrinter = await formicarium.printerAddresses(0);  console.log("First Printer Address:", firstPrinter);} catch (err) {  console.error("Error fetching printer address:", err);}
const printerData = await formicarium.printers("0xf4b251615F10Bc7103f7e42C286fbBA9B7aF7760");console.log("Printer Data:", printerData);
const printerCount = await formicarium.printerAddresses.length;console.log("Number of registered printers:", printerCount);
const tx = await formicarium.connect(printer).registerPrinter("Test Printer 123");await tx.wait();
const formicarium = await hre.ethers.getContractAt("Formicarium", "0xE2BBceBC540bEF2e1d76dD3154Bd94Bf1846b705");const [printer] = await hre.ethers.getSigners(); // Use an account as the printerconst tx = await formicarium.connect(printer).registerPrinter("Test Printer 123");await tx.wait();console.log("âœ… Printer registered!");
const formicarium = await hre.ethers.getContractAt("Formicarium", "0xE2BBceBC540bEF2e1d76dD3154Bd94Bf1846b705");const printerCount = await formicarium.printerAddresses.length;console.log("Number of registered printers:", printerCount);
        printerAddresses.push(msg.sender);
        printers[msg.sender] = Printer(msg.sender, _printerDetails, address(0));
        require(printers[msg.sender].ID == address(0), "Printer already registered");
function registerPrinter(string memory _printerDetails) public {
const formicarium = await hre.ethers.getContractAt("Formicarium", "0xYourFormicariumAddress");const printerCount = await formicarium.printerAddresses.length;console.log("Number of registered printers:", printerCount);
const wallet = hre.ethers.Wallet.createRandom();console.log("Address:", wallet.address);console.log("Private Key:", wallet.privateKey);
m.getAccount(0)
console.log("Deployer Balance:", hre.ethers.formatEther(balance), "MTK");
const balance = await paymentToken.balanceOf("0xf4b251615F10Bc7103f7e42C286fbBA9B7aF7760");
const paymentToken = await hre.ethers.getContractAt("ERC20Mock", "0x3207249ba95035b067D9700A5d221531A6eA3BcB")
const wallet = hre.ethers.Wallet.createRandom();console.log("Address:", wallet.address);console.log("Private Key:", wallet.privateKey);